[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:86:26: pattern type is incompatible with expected type;[0m
[0m[[0m[31merror[0m] [0m[0m found   : None.type[0m
[0m[[0m[31merror[0m] [0m[0m required: List[Statement][0m
[0m[[0m[31merror[0m] [0m[0m        case statement ~ None => statement[0m
[0m[[0m[31merror[0m] [0m[0m                         ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:86:34: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Statement[0m
[0m[[0m[31merror[0m] [0m[0m required: List[Statement][0m
[0m[[0m[31merror[0m] [0m[0m        case statement ~ None => statement[0m
[0m[[0m[31merror[0m] [0m[0m                                 ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:87:23: constructor cannot be instantiated to expected type;[0m
[0m[[0m[31merror[0m] [0m[0m found   : a ~ b[0m
[0m[[0m[31merror[0m] [0m[0m required: Statement[0m
[0m[[0m[31merror[0m] [0m[0m        case statement~_~statement =>[0m
[0m[[0m[31merror[0m] [0m[0m                      ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:87:26: statement is already defined as value statement[0m
[0m[[0m[31merror[0m] [0m[0m        case statement~_~statement =>[0m
[0m[[0m[31merror[0m] [0m[0m                         ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:87:36: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Unit[0m
[0m[[0m[31merror[0m] [0m[0m required: List[Statement][0m
[0m[[0m[31merror[0m] [0m[0m        case statement~_~statement =>[0m
[0m[[0m[31merror[0m] [0m[0m                                   ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:102:77: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : PascalParser.Parser[List[Statement]][0m
[0m[[0m[31merror[0m] [0m[0m required: PascalParser.Parser[Statement][0m
[0m[[0m[31merror[0m] [0m[0m    def compound_statement: Parser[Statement] = BEGIN ~> statement_sequence <~ END[0m
[0m[[0m[31merror[0m] [0m[0m                                                                            ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:111:67: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : List[Statement][0m
[0m[[0m[31merror[0m] [0m[0m required: PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m        case _~statement_sequence~_~expression => RepeatStatement(statement_sequence,expression);[0m
[0m[[0m[31merror[0m] [0m[0m                                                                  ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:111:86: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m required: Statement[0m
[0m[[0m[31merror[0m] [0m[0m        case _~statement_sequence~_~expression => RepeatStatement(statement_sequence,expression);[0m
[0m[[0m[31merror[0m] [0m[0m                                                                                     ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:117:42: expression is already defined as value expression[0m
[0m[[0m[31merror[0m] [0m[0m        case _~identifier~_~expression~_~expression~_ ~statement=> {[0m
[0m[[0m[31merror[0m] [0m[0m                                         ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:118:25: not enough arguments for method apply: (indexvar: IDENTIFIER, startexp: PascalASTNode, endexp: PascalASTNode, dir: PascalToken, statement: Statement)ForStatement in object ForStatement.[0m
[0m[[0m[31merror[0m] [0m[0mUnspecified value parameter statement.[0m
[0m[[0m[31merror[0m] [0m[0m            ForStatement(identifier,expression,expression,statement)[0m
[0m[[0m[31merror[0m] [0m[0m                        ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:122:104: not found: value resep[0m
[0m[[0m[31merror[0m] [0m[0m    def if_statement: Parser[Statement] = IF ~ expression ~ THEN  ~ statement ~ opt(ELSE ~ statement) ~resep(expression, COLON) ^^{[0m
[0m[[0m[31merror[0m] [0m[0m                                                                                                       ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:123:56: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Any[0m
[0m[[0m[31merror[0m] [0m[0m required: PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_~None~_~None => IfStatement(expression, None, None)[0m
[0m[[0m[31merror[0m] [0m[0m                                                       ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:123:68: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : None.type[0m
[0m[[0m[31merror[0m] [0m[0m required: Statement[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_~None~_~None => IfStatement(expression, None, None)[0m
[0m[[0m[31merror[0m] [0m[0m                                                                   ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:123:74: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : None.type[0m
[0m[[0m[31merror[0m] [0m[0m required: Statement[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_~None~_~None => IfStatement(expression, None, None)[0m
[0m[[0m[31merror[0m] [0m[0m                                                                         ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:124:61: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Any[0m
[0m[[0m[31merror[0m] [0m[0m required: PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_~Some(se1)~_~None => IfStatement(expression,Some(se1), None)[0m
[0m[[0m[31merror[0m] [0m[0m                                                            ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:124:76: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Some[Any][0m
[0m[[0m[31merror[0m] [0m[0m required: Statement[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_~Some(se1)~_~None => IfStatement(expression,Some(se1), None)[0m
[0m[[0m[31merror[0m] [0m[0m                                                                           ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:124:83: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : None.type[0m
[0m[[0m[31merror[0m] [0m[0m required: Statement[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_~Some(se1)~_~None => IfStatement(expression,Some(se1), None)[0m
[0m[[0m[31merror[0m] [0m[0m                                                                                  ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:125:65: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Any[0m
[0m[[0m[31merror[0m] [0m[0m required: PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_~Some(se1)~_~Some(se2) =>IfStatement(expression,Some(se1), Some(se2))[0m
[0m[[0m[31merror[0m] [0m[0m                                                                ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:125:80: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Some[Any][0m
[0m[[0m[31merror[0m] [0m[0m required: Statement[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_~Some(se1)~_~Some(se2) =>IfStatement(expression,Some(se1), Some(se2))[0m
[0m[[0m[31merror[0m] [0m[0m                                                                               ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:125:91: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Some[Any][0m
[0m[[0m[31merror[0m] [0m[0m required: Statement[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_~Some(se1)~_~Some(se2) =>IfStatement(expression,Some(se1), Some(se2))[0m
[0m[[0m[31merror[0m] [0m[0m                                                                                          ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:130:32: e2 is already defined as value e2[0m
[0m[[0m[31merror[0m] [0m[0m        case e2 ~ Some(COLON ~ e2 ~ None) => OutputValue(e1,Some(e2), None)[0m
[0m[[0m[31merror[0m] [0m[0m                               ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:130:58: not found: value e1[0m
[0m[[0m[31merror[0m] [0m[0m        case e2 ~ Some(COLON ~ e2 ~ None) => OutputValue(e1,Some(e2), None)[0m
[0m[[0m[31merror[0m] [0m[0m                                                         ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:131:17: constructor cannot be instantiated to expected type;[0m
[0m[[0m[31merror[0m] [0m[0m found   : a ~ b[0m
[0m[[0m[31merror[0m] [0m[0m required: PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m        case e1 ~ e2 ~Some(COLON~e3)=> OutputValue(e1,Some(e2),Some(e3))[0m
[0m[[0m[31merror[0m] [0m[0m                ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:131:28: pattern type is incompatible with expected type;[0m
[0m[[0m[31merror[0m] [0m[0m found   : COLON.type[0m
[0m[[0m[31merror[0m] [0m[0m required: PascalParser.Elem ~ PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m    (which expands to)  PascalToken ~ PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m        case e1 ~ e2 ~Some(COLON~e3)=> OutputValue(e1,Some(e2),Some(e3))[0m
[0m[[0m[31merror[0m] [0m[0m                           ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:131:69: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Option[PascalASTNode][0m
[0m[[0m[31merror[0m] [0m[0m required: PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m        case e1 ~ e2 ~Some(COLON~e3)=> OutputValue(e1,Some(e2),Some(e3))[0m
[0m[[0m[31merror[0m] [0m[0m                                                                    ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:132:31: missing parameter type for expanded function ((x$1: <error>) => OutputValue(x$1, None, None))[0m
[0m[[0m[31merror[0m] [0m[0m        case _ => OutputValue(_,None,None)[0m
[0m[[0m[31merror[0m] [0m[0m                              ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:141:56: missing argument list for method ~ in class Parser[0m
[0m[[0m[31merror[0m] [0m[0mUnapplied methods are only converted to functions when a function type is expected.[0m
[0m[[0m[31merror[0m] [0m[0mYou can make this conversion explicit by writing `~ _` or `~(_)` instead of `~`.[0m
[0m[[0m[31merror[0m] [0m[0m    def expression: Parser[PascalASTNode] = expression ~ match{[0m
[0m[[0m[31merror[0m] [0m[0m                                                       ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:142:32: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Unit[0m
[0m[[0m[31merror[0m] [0m[0m required: PascalParser.Parser[PascalASTNode][0m
[0m[[0m[31merror[0m] [0m[0m      case relational_operator => [0m
[0m[[0m[31merror[0m] [0m[0m                               ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:143:29: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Unit[0m
[0m[[0m[31merror[0m] [0m[0m required: PascalParser.Parser[PascalASTNode][0m
[0m[[0m[31merror[0m] [0m[0m      case simple_expression=>[0m
[0m[[0m[31merror[0m] [0m[0m                            ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:149:94: too many arguments (2) for method rep: (p: => PascalParser.Parser[T])PascalParser.Parser[List[T]][0m
[0m[[0m[31merror[0m] [0m[0m    def simple_expression: Parser[PascalASTNode] = opt(sign) ~ term ~ rep(addition_operator, term) ^^{[0m
[0m[[0m[31merror[0m] [0m[0m                                                                                             ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:150:59: too many arguments (2) for method rep: (p: => PascalParser.Parser[T])PascalParser.Parser[List[T]][0m
[0m[[0m[31merror[0m] [0m[0m        case PLUS =>(PLUS ~ term ~ rep(addition_operator, term));[0m
[0m[[0m[31merror[0m] [0m[0m                                                          ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:151:35: value rep is not a member of PascalParser.Parser[PascalParser.Elem ~ PascalASTNode][0m
[0m[[0m[31merror[0m] [0m[0m        case MINUS=>(MINUS ~ term rep(addition_operator,term))[0m
[0m[[0m[31merror[0m] [0m[0m                                  ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:159:46: polymorphic expression cannot be instantiated to expected type;[0m
[0m[[0m[31merror[0m] [0m[0m found   : [U](q: => PascalParser.Parser[U])PascalParser.Parser[PascalASTNode ~ U][0m
[0m[[0m[31merror[0m] [0m[0m required: PascalParser.Parser[PascalASTNode][0m
[0m[[0m[31merror[0m] [0m[0m    def term: Parser[PascalASTNode] = factor ~ [0m
[0m[[0m[31merror[0m] [0m[0m                                             ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:162:26: constructor cannot be instantiated to expected type;[0m
[0m[[0m[31merror[0m] [0m[0m found   : a ~ b[0m
[0m[[0m[31merror[0m] [0m[0m required: PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_ => [0m
[0m[[0m[31merror[0m] [0m[0m                         ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:162:29: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Unit[0m
[0m[[0m[31merror[0m] [0m[0m required: PascalASTNode[0m
[0m[[0m[31merror[0m] [0m[0m        case _~expression~_ => [0m
[0m[[0m[31merror[0m] [0m[0m                            ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:168:53: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : List[IDENTIFIER][0m
[0m[[0m[31merror[0m] [0m[0m required: IDENTIFIER[0m
[0m[[0m[31merror[0m] [0m[0m        case identifier_list~_~constant => ConstDef(identifier_list,constant)[0m
[0m[[0m[31merror[0m] [0m[0m                                                    ^[0m
[0m[[0m[31merror[0m] [0m[0mC:\Users\mattw\Lehigh\cse262\cse262\PascalCompilerStartup\src\main\scala\PascalParser.scala:177:73: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : PascalParser.Parser[List[IDENTIFIER] ~ PascalParser.Elem ~ PascalASTNode][0m
[0m[[0m[31merror[0m] [0m[0m    (which expands to)  PascalParser.Parser[List[IDENTIFIER] ~ PascalToken ~ PascalASTNode][0m
[0m[[0m[31merror[0m] [0m[0m required: PascalParser.Parser[VarDecl][0m
[0m[[0m[31merror[0m] [0m[0m    def variable_declaration: Parser[VarDecl] = identifier_list ~ COLON ~ atype[0m
[0m[[0m[31merror[0m] [0m[0m                                                                        ^[0m
[0m[[0m[31merror[0m] [0m[0m37 errors found[0m
